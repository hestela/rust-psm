var searchIndex = {};
searchIndex["rust_psm"] = {"doc":"","items":[[3,"Version","rust_psm","",null,null],[5,"init","","Can only be called once, using ONCE_INIT as a way arround global state.\nC version allows for init to be called multiple times, but after the\nfirst time, it seems like nothing useful is done.\nThis should also prevent calling init after finalize.",null,{"inputs":[{"name":"version"}],"output":{"name":"error"}}],[5,"finalize","","",null,null],[5,"num_ipath_units","","",null,{"inputs":[],"output":{"name":"result"}}],[0,"error","","Contains the different error codes that were in psm.h in the C version.",null,null],[4,"Error","rust_psm::error","",null,null],[13,"Ok","","",0,null],[13,"NoProgress","","",0,null],[13,"ParamError","","",0,null],[13,"NoMemory","","",0,null],[13,"NotIinitalized","","",0,null],[13,"BadApiVersion","","",0,null],[13,"NoAffinity","","",0,null],[13,"InternalError","","",0,null],[13,"ShmemSegmentError","","",0,null],[13,"OptReadOnly","","",0,null],[13,"Timeout","","",0,null],[13,"TooManyEps","","",0,null],[13,"Finalized","","",0,null],[13,"EpClosed","","",0,null],[13,"NoDevice","","",0,null],[13,"UnitNotFound","","",0,null],[13,"DeviceFailure","","",0,null],[13,"CloseTimeout","","",0,null],[13,"NoPortsAvailable","","",0,null],[13,"NoNetwork","","",0,null],[13,"InvalidUuidKey","","",0,null],[13,"EpNoResources","","",0,null],[13,"UnkownEpid","","",0,null],[13,"UnreachableEpid","","",0,null],[13,"InvalidNode","","",0,null],[13,"InvalidMtu","","",0,null],[13,"InvalidVersion","","",0,null],[13,"InvalidConnect","","",0,null],[13,"AlreadyConnected","","",0,null],[13,"NetworkError","","",0,null],[13,"InvalidPkey","","",0,null],[13,"EpidPathResolution","","",0,null],[13,"MqNoCompletions","","",0,null],[13,"MqTruncation","","",0,null],[13,"AmInvalidReply","","",0,null],[13,"AlreadyInitialized","","",0,null],[13,"UnknownError","","",0,null],[5,"error_to_string","","",null,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[0,"fileops","rust_psm","Contains operations related to the /dev/ipath character files.",null,null],[3,"Fd","rust_psm::fileops","",null,null],[11,"open","","",1,{"inputs":[{"name":"t"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"try_set_flag","","",1,null],[11,"as_raw_fd","","",1,null],[11,"drop","","",1,null],[0,"ep","rust_psm","Datatypes and functions related to Ep (endpoints) aka psm_ep_t,\n(for now) EpAddr aka psm_epaddr_t, and Epid aka psm_epid_t.",null,null],[3,"Ep","rust_psm::ep","",null,null],[3,"EpOpts","","",null,null],[3,"Epaddr","","",null,null],[5,"get_nid","","",null,{"inputs":[{"name":"epid"}],"output":{"name":"u64"}}],[5,"get_context","","",null,{"inputs":[{"name":"epid"}],"output":{"name":"u64"}}],[5,"get_port","","",null,{"inputs":[{"name":"epid"}],"output":{"name":"u64"}}],[0,"consts","","",null,null],[17,"IPATH_MAX_UNIT","rust_psm::ep::consts","",null,null],[17,"IPATH_MAX_PORT","","",null,null],[6,"Epid","rust_psm::ep","",null,null],[11,"open","","",2,{"inputs":[{"name":"uuid"},{"name":"epopts"}],"output":{"name":"result"}}],[11,"close","","",2,{"inputs":[{"name":"ep"},{"name":"isize"},{"name":"u64"}],"output":{"name":"error"}}],[11,"connect","","",2,{"inputs":[{"name":"ep"},{"name":"box"},{"name":"vec"},{"name":"i64"}],"output":{"name":"result"}}],[0,"ipath","rust_psm","This module should be equivalent to the ipath directory in the C version.\nMostly support functions and functions to interface with the ib_qib driver\nwill live in this module.",null,null],[0,"service","rust_psm::ipath","",null,null],[0,"sysfs","","Allows for reading of ib_qib attributes from sysfs files.\nExamples include number of free contexts and InfiniBand GIDS.",null,null],[5,"read_port_attr","rust_psm::ipath::sysfs","Reads attributes from /sys/class/infiniband/qib[0-9]/ports/[0-1]/*",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[5,"read_unit_attr","","Reads attributes from /sys/class/infiniband/qib[0-9]/*",null,{"inputs":[{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[0,"ptl_am","rust_psm","ptl_am - Packet Transport Layer for Active Messages and for shared memory\nmessages.",null,null],[0,"ptl_ips","","ptl_ips - Packet Transport Layer for the Interconnect Protocol Stack.",null,null],[0,"ptl_self","","ptl_self - Packet Transport Layer for loop-back/send-to-self",null,null]],"paths":[[4,"Error"],[3,"Fd"],[3,"Ep"]]};
initSearch(searchIndex);
